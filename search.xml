<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[选择排序]]></title>
    <url>%2F2019%2F09%2F23%2F%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[选择排序首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 重复第二步，直到所有元素均排序完毕。 Java 代码实现1234567891011121314151617181920212223242526272829public class SelectionSort implements IArraySort &#123; @Override public int[] sort(int[] sourceArray) throws Exception &#123; int[] arr = Arrays.copyOf(sourceArray, sourceArray.length); // 总共要经过 N-1 轮比较 for (int i = 0; i &lt; arr.length - 1; i++) &#123; int min = i; // 每轮需要比较的次数 N-i for (int j = i + 1; j &lt; arr.length; j++) &#123; if (arr[j] &lt; arr[min]) &#123; // 记录目前能找到的最小值元素的下标 min = j; &#125; &#125; // 将找到的最小值和i位置所在的值进行交换 if (i != min) &#123; int tmp = arr[i]; arr[i] = arr[min]; arr[min] = tmp; &#125; &#125; return arr; &#125;&#125; JavaScript 代码实现12345678910111213141516function selectionSort(arr) &#123; var len = arr.length; var minIndex, temp; for (var i = 0; i &lt; len - 1; i++) &#123; minIndex = i; for (var j = i + 1; j &lt; len; j++) &#123; if (arr[j] &lt; arr[minIndex]) &#123; // 寻找最小的数 minIndex = j; // 将最小数的索引保存 &#125; &#125; temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; &#125; return arr;&#125; Python 代码实现1234567891011def selectionSort(arr): for i in range(len(arr) - 1): # 记录最小数的索引 minIndex = i for j in range(i + 1, len(arr)): if arr[j] &lt; arr[minIndex]: minIndex = j # i 不是最小数时，将 i 和最小数进行交换 if i != minIndex: arr[i], arr[minIndex] = arr[minIndex], arr[i] return arr C 语言12345678910111213141516171819void swap(int *a,int *b) //交換兩個變數&#123; int temp = *a; *a = *b; *b = temp;&#125;void selection_sort(int arr[], int len)&#123; int i,j; for (i = 0 ; i &lt; len - 1 ; i++) &#123; int min = i; for (j = i + 1; j &lt; len; j++) //走訪未排序的元素 if (arr[j] &lt; arr[min]) //找到目前最小值 min = j; //紀錄最小值 swap(&amp;arr[min], &amp;arr[i]); //做交換 &#125;&#125; C++12345678910template&lt;typename T&gt; //整數或浮點數皆可使用，若要使用物件（class）時必須設定大於（&gt;）的運算子功能void selection_sort(std::vector&lt;T&gt;&amp; arr) &#123; for (int i = 0; i &lt; arr.size() - 1; i++) &#123; int min = i; for (int j = i + 1; j &lt; arr.size(); j++) if (arr[j] &lt; arr[min]) min = j; std::swap(arr[i], arr[min]); &#125;&#125; C12345678910111213static void selection_sort&lt;T&gt;(T[] arr) where T : System.IComparable&lt;T&gt;&#123;//整數或浮點數皆可使用 int i, j, min, len = arr.Length; T temp; for (i = 0; i &lt; len - 1; i++) &#123; min = i; for (j = i + 1; j &lt; len; j++) if (arr[min].CompareTo(arr[j]) &gt; 0) min = j; temp = arr[min]; arr[min] = arr[i]; arr[i] = temp; &#125;&#125; PHP 代码实现12345678910111213141516function selectionSort($arr)&#123; $len = count($arr); for ($i = 0; $i &lt; $len - 1; $i++) &#123; $minIndex = $i; for ($j = $i + 1; $j &lt; $len; $j++) &#123; if ($arr[$j] &lt; $arr[$minIndex]) &#123; $minIndex = $j; &#125; &#125; $temp = $arr[$i]; $arr[$i] = $arr[$minIndex]; $arr[$minIndex] = $temp; &#125; return $arr;&#125; Go 代码实现12345678910111213func selectionSort(arr []int) []int &#123; length := len(arr) for i := 0; i &lt; length-1; i++ &#123; min := i for j := i + 1; j &lt; length; j++ &#123; if arr[min] &gt; arr[j] &#123; min = j &#125; &#125; arr[i], arr[min] = arr[min], arr[i] &#125; return arr&#125; 参考]]></content>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序]]></title>
    <url>%2F2019%2F09%2F23%2F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[冒泡排序比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 Java 代码实现12345678910111213141516171819202122232425262728public class BubbleSort implements IArraySort &#123; @Override public int[] sort(int[] sourceArray) throws Exception &#123; // 对 arr 进行拷贝，不改变参数内容 int[] arr = Arrays.copyOf(sourceArray, sourceArray.length); for (int i = 1; i &lt; arr.length; i++) &#123; // 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。 boolean flag = true; for (int j = 0; j &lt; arr.length - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; int tmp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = tmp; flag = false; &#125; &#125; if (flag) &#123; break; &#125; &#125; return arr; &#125;&#125; JavaScript 代码实现12345678910111213function bubbleSort(arr) &#123; var len = arr.length; for (var i = 0; i &lt; len - 1; i++) &#123; for (var j = 0; j &lt; len - 1 - i; j++) &#123; if (arr[j] &gt; arr[j+1]) &#123; // 相邻元素两两对比 var temp = arr[j+1]; // 元素交换 arr[j+1] = arr[j]; arr[j] = temp; &#125; &#125; &#125; return arr;&#125; Python 代码实现123456def bubbleSort(arr): for i in range(1, len(arr)): for j in range(0, len(arr)-i): if arr[j] &gt; arr[j+1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr C 语言 代码实现1234567891011121314151617181920#include &lt;stdio.h&gt;void bubble_sort(int arr[], int len) &#123; int i, j, temp; for (i = 0; i &lt; len - 1; i++) for (j = 0; j &lt; len - 1 - i; j++) if (arr[j] &gt; arr[j + 1]) &#123; temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125;&#125;int main() &#123; int arr[] = &#123; 22, 34, 3, 32, 82, 55, 89, 50, 37, 5, 64, 35, 9, 70 &#125;; int len = (int) sizeof(arr) / sizeof(*arr); bubble_sort(arr, len); int i; for (i = 0; i &lt; len; i++) printf("%d ", arr[i]); return 0;&#125; C++ 语言 代码实现123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;template&lt;typename T&gt; //整数或浮点数皆可使用,若要使用类(class)或结构体(struct)时必须重载大于(&gt;)运算符void bubble_sort(T arr[], int len) &#123; int i, j; for (i = 0; i &lt; len - 1; i++) for (j = 0; j &lt; len - 1 - i; j++) if (arr[j] &gt; arr[j + 1]) swap(arr[j], arr[j + 1]);&#125;int main() &#123; int arr[] = &#123; 61, 17, 29, 22, 34, 60, 72, 21, 50, 1, 62 &#125;; int len = (int) sizeof(arr) / sizeof(*arr); bubble_sort(arr, len); for (int i = 0; i &lt; len; i++) cout &lt;&lt; arr[i] &lt;&lt; ' '; cout &lt;&lt; endl; float arrf[] = &#123; 17.5, 19.1, 0.6, 1.9, 10.5, 12.4, 3.8, 19.7, 1.5, 25.4, 28.6, 4.4, 23.8, 5.4 &#125;; len = (float) sizeof(arrf) / sizeof(*arrf); bubble_sort(arrf, len); for (int i = 0; i &lt; len; i++) cout &lt;&lt; arrf[i] &lt;&lt; ' '&lt;&lt;endl; return 0;&#125; C#代码实现12345678910111213141516171819static void BubbleSort(int[] intArray) &#123; int temp = 0; bool swapped; for (int i = 0; i &lt; intArray.Length; i++) &#123; swapped = false; for (int j = 0; j &lt; intArray.Length - 1 - i; j++) if (intArray[j] &gt; intArray[j + 1]) &#123; temp = intArray[j]; intArray[j] = intArray[j + 1]; intArray[j + 1] = temp; if (!swapped) swapped = true; &#125; if (!swapped) return; &#125;&#125; go语言代码实现1234567891011func bubbleSort(arr []int) []int &#123; length := len(arr) for i := 0; i &lt; length; i++ &#123; for j := 0; j &lt; length-1-i; j++ &#123; if arr[j] &gt; arr[j+1] &#123; arr[j], arr[j+1] = arr[j+1], arr[j] &#125; &#125; &#125; return arr&#125; PHP代码实现1234567891011121314function bubbleSort($arr)&#123; $len = count($arr); for ($i = 0; $i &lt; $len - 1; $i++) &#123; for ($j = 0; $j &lt; $len - 1 - $i; $j++) &#123; if ($arr[$j] &gt; $arr[$j+1]) &#123; $tmp = $arr[$j]; $arr[$j] = $arr[$j+1]; $arr[$j+1] = $tmp; &#125; &#125; &#125; return $arr;&#125; 参考]]></content>
  </entry>
  <entry>
    <title><![CDATA[SQL常用简单语句]]></title>
    <url>%2F2019%2F09%2F22%2Fsql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[Welcome to 我的博客! 记录一下常用的SQL语句创建数据库1234567891011121314151617181920USE masterGOIF EXISTS (SELECT * FROM SysDataBases WHERE NAME = 'NBA')DROP DATABASE NBAGOCREATE DATABASE NBAON PRIMARY( NAME = 'NBA', FILENAME = 'D:\sql\db\NBA.mdf', SIZE = 5MB, FILEGROWTH = 1MB)LOG ON( NAME = 'NBA_log', FILENAME = 'D:\sql\db\NBA_log.ldf', SIZE = 1MB, FILEGROWTH = 10%) select语句12345SELECT * FROM table_name；SELECT * FROM table_name WHERE 条件; SELECT * FROM table_name ORDER BY 条件 ASC|DESC; SQL INSERT INTO 语句12INSERT INTO table_name (column1,column2,column3,...)VALUES (value1,value2,value3,...); SQL UPDATE 语句123UPDATE table_nameSET column1=value1,column2=value2,...WHERE some_column=some_value; SQL DELETE 语句12DELETE FROM table_nameWHERE some_column=some_value; SQL LIKE 操作符123SELECT column_name(s)FROM table_nameWHERE column_name LIKE pattern; SQL IN 操作符123SELECT column_name(s)FROM table_nameWHERE column_name IN (value1,value2,...); SQL BETWEEN 操作符123SELECT column_name(s)FROM table_nameWHERE column_name BETWEEN value1 AND value2; SQL 别名列的 SQL 别名语法12SELECT column_name AS alias_nameFROM table_name; 表的 SQL 别名语法12SELECT column_name(s)FROM table_name AS alias_name; SQL SELECT INTO 语句（SELECT INTO 语句从一个表复制数据，然后把数据插入到另一个新表中。）123CREATE TABLE 新表ASSELECT * FROM 旧表 SQL 约束（Constraints）123456NOT NULL - 指示某列不能存储 NULL 值。UNIQUE - 保证某列的每行必须有唯一的值。PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。CHECK - 保证列中的值符合指定的条件。DEFAULT - 规定没有给列赋值时的默认值。 TRUNCATE TABLE 语句（仅仅需要删除表内的数据，但并不删除表本身）1TRUNCATE TABLE table_name 参考自 菜鸟教程]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2019%2F09%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
</search>
